
#+title: My EMCAS configutarion
#+author: Andreas Meixner

* Package system

Initailize the package system and add *melpa.org* to the package archives.
MELPA hosts a lot more packages than ELPA so it is almost mandatory to add it.
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
#+end_src
use-package is a package that makes it much simpler to configure all
your packages. It can automatically install missing packages.
Obviously it can not install itself if missing, so this makes sure
use-package is tere or install it if not.
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
  #+end_src

* My own lisp source
All my own lisp source is located in the *~/.emacs/lisp/* folder.
This code adds that folder to the load-path list.
#+begin_src emacs-lisp
;; add my own dir to the load-path
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src

* GUI settings
I want my UI to look as clean and clutter free as possible.

So start off by setting a nice big font for good readability.
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Droid Sans Mono-13"))
#+end_src
  
Minimize GUI clutter by removing menu bar, tool bar and the scroll bars.
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src
The terminal version of emacs does not know scrollbars, so this should only be
done, when a graphical frame is opened.
#+begin_src emacs-lisp
(defun new-frame-setup (frame)
  (if (display-graphic-p frame)
       (scroll-bar-mode -1)))

;; Run when a new frame is created
(add-hook 'after-make-frame-functions 'new-frame-setup)
#+end_src
  
Do not show the startup screen. It is completely useless!
Also only display no message in the scratch buffer, and a minimal one
in the echo area.
#+begin_src emacs-lisp
(setq inhibit-startup-screen 1)
(setq initial-scratch-message "")
(setq inhibit-startup-echo-area-message "SCRATCH")
#+end_src
I do not need all the information provided by the standard mode line.
So empty it out completely, and only show the current buffer name and
change status in the header line.

*TODO:* current cursor position somewhere in the lower right may be nice.
#+begin_src emacs-lisp
;(setq-default mode-line-format '("l:%l c:%c"))
(setq-default mode-line-format nil)
(setq-default header-line-format '("%b (%+)"))
#+end_src

* General behaviour
I *HATE* those stupid backup files, you know the #filename# and filename~ ones.
Dont create them. If i screw up i use more modern techniques to recover
my data, like GIT.
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
;; alternatively create them in a seperate folder
;; (setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))
#+end_src
  
* Colors, highlighting, syntax, alignment, ...
Load my own color theme
#+begin_src emacs-lisp
;(load-theme 'kolors)
;(add-hook 'after-init-hook (lambda () (load-theme 'kolors)))
#+end_src
Highlight matching paranthesis.
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src
  

Mark all parts of lines that are longer than 80 cahracters. This helps keeping
utext/code files nice. I do not think long lines are allways bad, but shorter 
then 80 characters does help with readability.
*ESPECIALLY WITH TEXT!*
#+begin_src emacs-lisp
(require 'whitespace)
(setq whitespace-line-column 80) 
(setq whitespace-style '(face lines-tail))               
(global-whitespace-mode 1)

#+end_src
* Languages
** C
Align line comments on consecutive lines properly
#+begin_src emacs-lisp
(setq c-auto-align-backslashes t)
#+end_src
Make emacs autmatically continue jdoc style comments on linebreak
#+begin_src emacs-lisp
(setq c-block-comment-prefix "* ")
#+end_src
* General keybindings
F7 is easily reachable and therefore it is cosen to make the frame fullscreen.
Full screen is nice for a distraction free environment.
#+begin_src emacs-lisp
(global-set-key (kbd "<f7>") 'toggle-frame-fullscreen)
#+end_src
* Packages
** Abbrev-mode
Abbrev-mode is a lot simpler than snippets but I find it quite sufficient.
It is mainly used for LaTeX and org-mode stuff.

Allways start abbrev-mode for every buffer
#+BEGIN_SRC emacs-lisp
(setq default-abbrev-mode t)
#+END_SRC

Load my own abbrevs from this file
#+BEGIN_SRC emacs-lisp
(setq abbrev-file-name "~/.emacs.d/default_abbrevs")
(if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file))
#+END_SRC

** Org-mode
Configuration of the all mighty org-mode

org-ref handles the bibliography and citations in org mode.
This is intended for use with bibtex (not biblatex) and export
as latex/pdf
#+BEGIN_SRC emacs-lisp
(use-package org-ref
:ensure t
:config (progn 
           (setq reftex-default-bibliography '("~/references.bib"))
           (setq org-ref-bibliography-notes "~/notes.org"
                 org-ref-default-bibliography '("~/references.bib")
                 org-ref-pdf-directory "~/bibtex-pdfs/")))
#+END_SRC

Tell The org-mode latex export process to use pdflatex and to also run bibtex.

#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
'("pdflatex %f" "bibtex %b" "pdflatex %f" "pdflatex %f"))
#+END_SRC
** evil
evil-mode makes emacs feel like vim. I *HATE* how emacs handles and
I love the vim way, so this is a no brainer.
A lot of additional packages exist for evil, which provide *SANE* 
vimish key bindings for different packages. All this is configured here.
*** evil-leader
Add the concept of the leader key.
I want my leader to be <SPACE>.
#+begin_src emacs-lisp
(use-package evil-leader
:ensure t
:config (progn (global-evil-leader-mode 1)
(evil-leader/set-leader "<SPC>"))
)
#+end_src2

Add some of my own key bindings. This is stuff i often use.
#+begin_src emacs-lisp
(evil-leader/set-key
  "q" 'save-buffers-kill-terminal'
  "F" 'projectile-find-file
  "f" 'find-file
  "j" 'imenu
  "w" 'save-buffer
  "b" 'switch-to-buffer
  "d" 'kill-this-buffer
  "e" 'eval-region
  "E" 'eval-buffer)
(evil-leader/set-key-for-mode 'c-mode "j" 'imenu)
#+end_src
*** evil-magit
Add vimish key bindings for the magit package.
#+begin_src emacs-lisp
(use-package evil-magit
:ensure t)
#+end_src
*** evil
JUST STRAT EVIL!
#+begin_src emacs-lisp
(use-package evil
:ensure t
:config (evil-mode 1))
#+end_src

** writeroom mode
This mode is great. It provides a distraction free editing environment.
It is not enabled for now, since I am experimenting with my own nodis-mode.
*TODO:* how can i link to the nodis paragraph?

Automatically use writeroom mode if editing text, c code, emacs code or latex.
#+begin_src emacs-lisp
;; (use-package writeroom-mode
;; :ensure t
;; :config (progn
;;         (setq writeroom-major-modes '(text-mode
;;			      c-mode
;;			      emacs-lisp-mode
;;			      LaTeX-mode
;;			      ))
;;         (global-writeroom-mode 1)))
#+end_src

** adoc mode
This mode helps with editing asciidoc files.
When a file name ends with /.ad/, /.adoc/ or /.asciidoc/ markdown-mode is loaded for
that buffer. 
#+begin_src emacs-lisp
(use-package adoc-mode
:ensure t
:config (progn
         (autoload 'adoc-mode "adoc-mode"
                  "Major mode for editing AsciiDoc files" t)
         (add-to-list 'auto-mode-alist '("\\.adoc\\'" . adoc-mode))
         (add-to-list 'auto-mode-alist '("\\.ad\\'" . adoc-mode))
         (add-to-list 'auto-mode-alist '("\\.asciidoc\\'" . adoc-mode))))
#+end_src
** markdown mode
This mode helps with editing markdown files.
When a file name ends with /.md/ or /.markdown/ markdown-mode is loaded for
that buffer. If the file name is /README.md/ the somewhat extenden
markdownmode for GitHub flavored markdown is loaded for the buffer.
#+begin_src emacs-lisp
(use-package markdown-mode
:ensure t
:config (progn
         (autoload 'markdown-mode "markdown-mode"
                  "Major mode for editing Markdown files" t)
         (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
         (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
         (autoload 'gfm-mode "markdown-mode"
            "Major mode for editing GitHub Flavored Markdown files" t)
         (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))))
#+end_src

** projectile
Why did i want this ?
#+begin_src emacs-lisp
(use-package projectile
:ensure t
:config (projectile-mode 1))
#+end_src
** Groovy mode
#+begin_src emacs-lisp
(use-package groovy-mode
:ensure t
:config (groovy-mode))
#+end_src
** nodis (NO DIStraction)
This is my own little creation. This is somewhat like writeroom mode, but 
adapted to my personal needs.
#+begin_src emacs-lisp
(require 'nodis-mode)
#+end_src

** origami
Ths mode is supposed to add vim like folding to emacs, but it does not
work for me. Maybe I give it another chance later.
** edger mode
#+begin_src emacs-lisp
(use-package ledger-mode
:ensure t
:config (ledger-mode))
#+end_src
